#!/usr/bin/python3
##
## EPITECH PROJECT, 2023
## 102architect
## File description:
## architect maths
##

import matrixes
import transforms
import sys

def to_int(num):
    try:
        return int(num)
    except:
        raise Exception("Invalid int")

def get_transformation_list():
    transforms = []
    status = "t"
    empty_param = {"type": None, "p1": None, "p2": None}
    param = empty_param.copy()
    for i in sys.argv[3:]:
        if status == "t":
            if len(i) != 2:
                raise Exception("Not valid argument size")
            if i[0] != "-" or not i[1] in "tzrs":
                raise Exception("Not a valid argument")
            param["type"] = i[1]
            status = "p1"
            continue
        elif status == "p1":
            param["p1"] = to_int(i)
            if param["type"] in "tz":
                status = "p2"
                continue
            status = "t"
        else:
            status = "t"
            param["p2"] = to_int(i)
        transforms.append(param)
        param = empty_param.copy()
    if status == "p1" or param["type"] != None:
        raise Exception("There is an uncompleted transformation")
    return transforms

def string_point(x, y):
    return f"({x:.2f}, {y:.2f})"

def main():
    if len(sys.argv) < 5:
        raise Exception("Not enough arguments")
    point = matrixes.Matrix(1, 3, [sys.argv[1], sys.argv[2], 1])
    steps = get_transformation_list()
    matrix = matrixes.Matrix(3, 3, [1, 0, 0, 0, 1, 0, 0, 0, 1])
    for i in steps:
        matrix = transforms.transforms[i["type"]](i["p1"], i["p2"]) * matrix
    result = matrix * point
    print(matrix)
    print(f"{string_point(point.matrix[0][0], point.matrix[1][0])} => "\
        f"{string_point(result.matrix[0][0], result.matrix[0][1])}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(e, file=sys.stderr)
        exit(84)
